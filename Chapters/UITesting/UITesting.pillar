!! UI testing
@cha:uitesting

Developers often think that testing UI is difficult. This is true that fully testing the placement and layout of widgets can be tedious. 
However, testing the logic of an application and in particular the interaction logic is possible and this is what we will show in this chapter. 
We show that testing Spec application is simple and effective.


!!! Testing Spec
Tests are key to ensure that everything works correctly. In addition, they free us from the fear to break something without being warned about it. Tests support refactorings. While such facts are general and applicable to many domains, they also true for user interfaces.



!!!! Spec architecture

Spec is based on an architecture with three different layers as shown in Figure~*@fig:Architecture*: 
- ""Presenters:"" Presenters defined the interaction logic and manipulate domain objects. They access back-end widgets but via an API that is specified by Adapters.
- ""Adapters:"" Adapters are objects exposing low-level back-end widgets. They are a bridge between presenters and low-level widgets.
- ""Back-end widgets"". Back-end widgets are plain widgets that can be used without Spec.

+Spec Architecture.>file://figures/ArchitectureSpec2.pdf|width=75|label=fig:Architecture+

!!!! Three roles and concerns
To help you understand the different possibilities of testing that you can engage, we identify the following roles and their related concerns.

- ""Spec Users.""Spec users are developers that build a new application. They define the logic of the application by assembling together presenters and domain objects.
- ""Spec Developers."" Spec developers are more concerned with the development of new Spec presenter and their link with the adapter.
- ""Widget Developers."" Widget developers are concerned about the logic and working of a given widget is a given back-end.

%+UI elements under test.>file://figures/UI.png|width=75|label=fig:UI+


!!! The Spec user

As a Spec user, you should consider that the back-ends are working and your responsibilities is to test the logic of the user interface components.
We should make sure that when the model changes, the user interface components reflect the changes.
Inversely when the user interface components change, we should ensure that the model is updated.

!!!! Example

%Figure @*fig:UI* shows the little application that we use in our example.

Here is a simple example: Imagine we have the following requirements.
- Click the button should add an element to the list.
- Select an element in the list should populate the form.
- Changing values in the form should change the objects in the list.

Such requirements are in fact the ones of the Pharo Launcher configuration list. 
We convert such requirements into tests as follows:

!!!! Spec user test 1: triggering a button action

Here we specify that clicking the button should add an element to the list.
The message ==launchConfigurations== is returning the list of configurations exposed by the launcher. 
Therefore we store the number of list items, then we access the add button of the presenter (here named image)
and we click this button sending the message ==click==. 
And we verify that the length of the list has increased by one. 

[[[
testClickAddButtonCreatesNewLaunchConfiguration
	
	| old |
	old := image launchConfigurations size.
	editor addButton click.
	self assert: image launchConfigurations size equals: old + 1
]]]


!!!! Spec user test 2
The following test verifies that a selection of an element in the list should populate the form.
The method ==clickItem:== simulates the selection of the element of index passed as argument. 

[[[
testClickOnLaunchConfigurationListItemSetsFormName
	| name |
	name := 'test'.
	image addLaunchConfiguration: (PhLaunchConfiguration named: name).
	editor refreshList.
	
	editor configurationList clickItem: 3.
	self assert: editor form nameInput text equals: name
]]]



!!!! Spec user test 3:
Changing values in the form should change the objects in the list. 
This test selects the second item of the list so that the form displays the values 
of such item. 
Then the name displayed in the form editor is changed to a new text.
And using the message ==displayValueAt:==, it verifies that the displayed value of a given list item (here the second 2, the currently displayed in the form)
is actually the new entered text.

[[[
testEditConfigurationNameUpdatesListItem
	| newName |
	newName := 'some name'.
	editor configurationList clickItem: 2.
	editor form nameInput text: newName.
	
	self 
		assert: (editor configurationList displayValueAt: 2)
		equals: newName
]]]


These examples of tests show that key actions such as clicking on a button, changing text, selecting 
a given list elements can be used to verify the expected behavior of the user interface.



!!! Concerns for the Spec developer

- I should write a presenter that works with many backends
- « I should agree with all backends! »
- I make sure widgets work OK
- My widget updates if my model changes My model updates if my Widget cha


+List Presenter.>file://figures/ListPresenter.png|width=75|label=fig:ListPresenter+

!!!! Example of Presenter

When we consider a list presenter as shown in Figure *@fig:ListPresenter*.
- Changing the selection should raise an event.
- The argument of the event should contain the changes.

!!!! Example of Presenter test 1.
Changing the selection should raise an event. 

[[[
testSetSelectIndexRaisesSelectionChangeEventOnlyOnce

	| count |
	count := 0.
	presenter 
		whenSelectionChangedDo: [ count := count + 1].
	presenter selectIndex: 1. 
	self assert: count equals: 1
]]]

!!!! Example of Presenter test 2.
The argument of the event should contain the changes

[[[
testSetSelectIndexRaisesSelectionItemChangeEventWithSelectedIndex

	| selectedItem |
	presenter
	whenSelectionChangedDo:
]]]


!!! Known limitation

Currently Spec does not offer a way to script and control popup window. It is not possible to script a button that opens a dialog 
for a value. 
Future versions of Spec20 should cover this missing feature.


!!! Conclusion
