!!SUnit: The framework
@cha:sunit

Now that you see that writing a test is easy, we will take the time to put in perspective the different aspects of SUnit. 
SUnit is a framework in the sense that it proposes an architecture that can be adapted. We will not cover the techniques 
to extend the framework but we will present the key classes and discuss some important points. 

!!!Understanding the framework

What we saw in the previous chapter is that a test method defines a test.
Now there is a catch: 
- A method (called a test method) of a subclass of the class ==TestCase== represents a test.
- A ==TestCase== subclass groups together all the tests sharing a similar context, called a ''fixture''.
- A ==setUp== method is run systematically before a test method is run and a ==tearDown== after.
- The framework builds a ==TestSuite== (a composite of tests) to execute the tests.



!!! During test execution

Figure *@fig:sunit-execution* shows the steps during the execution ==run== of a test:


+During ==run== execution.>file://figures/sunit-scenario.png|width=60|label=fig:sunit-execution+

+setUp and teardDown in action.>file://figures/setUpAndTearDown.pdf|width=80|label=fig:setUpAndTearDown+


!!! The framework in a nutshell

SUnit consists of four main classes: ==TestCase==, ==TestSuite==,
==TestResult==, and ==TestResource==, as shown in Figure *@fig:sunit-classes*.

+The four classes representing the core of SUnit.>file://figures/sunit-classes.png|width=80|label=fig:sunit-classes+

!!!! TestCase

==TestCase== is an abstract class that is designed to be subclassed. Each of its
subclasses represents a ""group"" of tests that share a common context: such a group is called a ""test suite"".

Each test is run by creating a new instance of a subclass of ==TestCase==, running ==setUp== to initialize the test fixture, running the test method itself, and then sending the ==tearDown== to clean up the test fixture.

The fixture is specified by instance variables of the subclass and by the specialization of the method ==setUp==, which initializes those instance
variables. Subclasses of ==TestCase== can also override method ==tearDown==,
which is invoked after the execution of each test, and can be used to release
any objects allocated during ==setUp==.

!!!TestSuite
Instances of the class ==TestSuite== contain a collection of test cases. An
instance of ==TestSuite== contains tests, and other test suites. That is, a test
suite contains sub-instances of ==TestCase== and ==TestSuite==.
Both individual test cases and test suites understand the same protocol, so
they can be treated in the same way (for example, both can be ==run==). This is
in fact an application of the Composite pattern in which ==TestSuite== is the
composite and the test cases are the leaves.

!!!TestResult

The class ==TestResult== represents the results of a ==TestSuite== execution.
It records the number of tests passed, the number of tests failed, and the
number of errors signalled.

!!! TestResources

The notion of a ''test resource'' represents a resource that is expensive to
set-up but which can be used by a whole series of tests. 
A ==TestResource== specifies a ==setUp== method that is executed just once before a full suite of tests;
this is in distinction to the ==TestCase >> setUp== method, which is executed before each test.
The class ==TestResource== represents resources that can be shared among a test suite:
Subclasses of ==TestResource== are associated to test case classes and this means that all the suite of tests
represented by the test case class (See Chapter *@cha:cookbook*).


!!! fails/Expected failures/skip
As we mentioned earlier, the results of a test execution is mainly: passed (meaning that it succeeded), fails (that an assertion is not valid) or error (that an unexpected problem occurred).

A test execution can be in a different state.

	fails
	expected failures
	skip



!!! Handling exceptions
One important 







!!!Glossary


!!!! A test case
A test case is a single test. It defined a context, a stimulus and at the minimum one assertion. It is described as a method of a TestCase subclass starting with ""test""

!!!! A test suite
A test suite (Composite design pattern) is a group of tests. The tests belonging to a test suite do not have to be from the same class.
In practice the test runner builds a test suite for all the test cases defined in a class and executes them one by one. 
Instances of the class ==TestSuite== contain a collection of test cases. 
An instance of ==TestSuite== contains tests, and other test suites. That is, a test
suite contains sub-instances of ==TestCase== and ==TestSuite==.

!!!! Fixture
A fixture is a context in which a stimulus will be executed and assertions verified. 
To share a fixture amongst multiple tests you can define the ==setUp== method. It is automatically invoked before any test method execution.


!!!Chapter summary

This chapter explained why tests are an important investment in the future of
your code. We explained in a step-by-step fashion how to define a few tests for
the class ==Set==. Then we gave an overview of the core of the SUnit framework
by presenting the classes ==TestCase==, ==TestResult==, ==TestSuite== and
==TestResources==. Finally we looked deep inside SUnit by following the
execution of a test and a test suite.

